<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc 
		http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.8.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">
	<!-- @Component，@Repository，@Service，@Controller 自動掃描加到bean工廠去 可@Autowired -->
	<!-- <context:annotation-config /> 被下面取代 -->

	<!-- 用annotation 自動註冊bean並保證@Required,@Autowired被注入 -->
	<!-- <context:component-scan base-package="tw.com.iwow.service" /> -->
	<!-- <jpa:repositories base-package="tw.com.iwow.dao" /> -->
	<!-- @EnableTransactionManagement annotation to be used in on @Configuration -->
	<!-- <tx:annotation-driven transaction-manager="transactionManager" /> -->


	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="com.mysql.jdbc.Driver" />
		<property name="url" value="jdbc:mysql://localhost:3306/springData" />
		<property name="username" value="root" />
		<property name="password" value="hoc123251845" />
		<!-- <property name="defaultAutoCommit" value="false" /> -->
	</bean>

<!-- 	<bean id="txManager" -->
<!-- 		class="org.springframework.jdbc.datasource.DataSourceTransactionManager"> -->
<!-- 		<property name="dataSource" ref="dataSource" /> -->
<!-- 	</bean> -->
	
	
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource"/>
	</bean>

	<!-- <bean id="GoodDao" class="org.database.GoodDao"> -->
	<!-- <property name="jdbcTemplate" ref="jdbcTemplate"/> -->

	<!-- <bean id="entityManagerFactory" -->
	<!-- class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean"> -->
	<!-- <property name="dataSource" ref="dataSource" /> -->
	<!-- @Entity scan -->
	<!-- <property name="packagesToScan" -->
	<!-- value="tw.com.iwow.entity,org.springframework.data.jpa.convert.threeten" 
		/> -->
	<!-- <property name="jpaVendorAdapter"> -->
	<!-- <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter" 
		/> -->
	<!-- </property> -->
	<!-- <property name="jpaProperties"> -->
	<!-- <props> -->
	<!-- <prop key="hibernate.dialect">org.hibernate.dialect.SQLServerDialect</prop> -->
	<!-- <prop key="hibernate.show_sql">true</prop> -->
	<!-- <prop key="hibernate.hbm2ddl.auto">update</prop> -->
	<!-- <prop key="hibernate.hbm2ddl.import_files">initial_data.sql</prop> -->
	<!-- </props> -->
	<!-- </property> -->
	<!-- </bean> -->
	<!-- <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager"> -->
	<!-- <property name="entityManagerFactory" ref="entityManagerFactory" /> -->
	<!-- </bean> -->


	<!-- <bean id="multipartResolver" -->
	<!-- class="org.springframework.web.multipart.commons.CommonsMultipartResolver" 
		/> -->
	<context:component-scan base-package="tw.com.pai.controller" />
	<context:component-scan base-package="tw.com.pai.service" />
	<context:component-scan base-package="tw.com.pai.dao" />
	<context:component-scan base-package="tw.com.pai.utils" />
	<mvc:annotation-driven />

	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix">
			<value>/WEB-INF/views/</value>
		</property>
		<property name="suffix">
			<value>.jsp</value>
		</property>
	</bean>

<!-- step1:Put static resources like cs, js or images into this folder webapp\resources -->
<!-- step2:Create a Spring mvc:resources mapping -->
<!-- step3:Include in JSP page via JSTL tag c:url or Spring tag spring:url -->
	<mvc:resources mapping="/resources/**" location="/resources/" />
	
<!-- 	<bean id="customJobFactory" class="tw.com.pai.utils.CustomJobFactory"></bean>   -->
<!--      定时任务配置 start   -->
<!--     <bean id="scheduler" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">     -->
<!--         <property name="dataSource" ref="dataSource"></property>       -->
<!--         可选，QuartzScheduler 启动时更新己存在的Job，这样就不用每次修改targetObject后删除qrtz_job_details表对应记录了         -->
<!--         <property name="overwriteExistingJobs" value="true" />         -->
<!--          必须的，QuartzScheduler 延时启动，应用启动完后 QuartzScheduler 再启动       -->
<!--         <property name="startupDelay" value="2" />       -->
<!--         设置自动启动       -->
<!--         <property name="autoStartup" value="true" />     -->
<!--         <property name="jobFactory" ref="customJobFactory"></property>   -->
<!--         <property name="applicationContextSchedulerContextKey" value="applicationContextKey" />   -->
<!--         <property name="configLocation" value="classpath:quartz/spring-quartz.properties" />         -->
<!--     </bean>   -->
<!--     定时任务配置 end   -->


	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="configLocation" value="classpath:mybatis_non_dataSource.xml" />
        <property name="mapperLocations" >
        	<list>
        		<value>classpath:mappers/CarMapper.xml</value>
        	</list>
        </property>
    </bean>
 
    <bean id="mapper" class="org.mybatis.spring.mapper.MapperFactoryBean" >
        <property name="mapperInterface" value="tw.com.pai.dao.mybatis.CarMapper" />
        <property name="sqlSessionFactory" ref="sqlSessionFactory" />
    </bean>
    
    <bean id="carService" class="tw.com.pai.service.CarService" />
</beans>